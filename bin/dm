#!/usr/bin/env node
'use strict';

const chalk = require('chalk');
const program = require('commander');
const spawn = require('win-spawn');
const join = require('path').join;
const resolve = require('path').resolve;
const exists = require('fs').existsSync;
const readFileSync = require('fs').readFileSync;
const printLogo = require('../print-logo');

// Notify update when process exits
const updater = require('update-notifier');
const pkg = require('../package.json');
updater({ pkg: pkg }).notify({ defer: true });

if (process.argv.slice(2).join('') === '-v') {
    printLogo();
    return;
}

program
    .usage('<command> [options]')
    .on('--help', printHelp)
    .parse(process.argv);

const aliases = {
    g: 'generate',
};
const args = process.argv.slice(3);
let subcmd = program.args[0];
if (aliases[subcmd]) subcmd = aliases[subcmd];

if (!subcmd) {
    program.help();
} else {
    const bin = executable(subcmd);
    if (bin) {
        wrap(spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] }));
    } else {
        program.help();
    }
}

function wrap(sp) {
    sp.on('close', function(code) {
        process.exit(code);
    });
}

function printHelp() {
    console.log('  Commands:');
    console.log('');
    console.log('    server                  Start server');
    console.log('       --target, -t         Specify service directory');
    console.log('       --open, -o           Service starts, open the default browser');
    console.log('');
    console.log('    doc                     Create api doc');
    console.log('       --target, -t         Target directory');
    console.log('       --dest, -d           Output directory');
    console.log('');
    console.log('  All commands can be run with -h (or --help) for more information.');

    printLogo();
}

function executable(subcmd) {
    var file = join(__dirname, 'dm-' + subcmd);
    if (exists(file)) {
        return file;
    }
}
